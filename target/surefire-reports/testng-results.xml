<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="20" passed="20">
  <reporter-output>
  </reporter-output>
  <suite name="PrimeMultiplicationTableTest" duration-ms="184" started-at="2016-05-10T05:58:37Z" finished-at="2016-05-10T05:58:37Z">
    <groups>
    </groups>
    <test name="Command line test" duration-ms="184" started-at="2016-05-10T05:58:37Z" finished-at="2016-05-10T05:58:37Z">
      <class name="PrimeMultiplicationTableTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="10" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="testGetPrimeNumberList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumberList" duration-ms="3" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumberList -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="18" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumberList status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumberList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="testGetPrimeNumberList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumberList" duration-ms="1" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumberList -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumberList status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumberList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testGetPrimeNumberList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumberList" duration-ms="0" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumberList -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumberList status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumberList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumberList status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumberList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="testGetPrimeNumberList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumberList" duration-ms="0" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumberList -->
        <test-method status="PASS" signature="testGetPrimeNumberList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumberList" duration-ms="1" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumberList -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumberList status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumberList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="testGetPrimeNumberList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumberList" duration-ms="2" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[+]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumberList -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumberList status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumberList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="testGetPrimeNumberList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumberList" duration-ms="3" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumberList -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumberList status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumberList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="testGetPrimeNumberMultiplicationEmptyList()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumberMultiplicationEmptyList" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Prime Number list cannot be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Prime Number list cannot be null
	at PrimeMultiplicationTable.getPrimeNumberMultiplicationList(PrimeMultiplicationTable.java:55)
	at PrimeMultiplicationTableTest.testGetPrimeNumberMultiplicationEmptyList(PrimeMultiplicationTableTest.java:123)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumberMultiplicationEmptyList -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumberMultiplicationEmptyList status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumberMultiplicationEmptyList()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="2" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="testGetPrimeNumberMultiplicationList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumberMultiplicationList" duration-ms="2" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumberMultiplicationList -->
        <test-method status="PASS" signature="testGetPrimeNumberMultiplicationList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumberMultiplicationList" duration-ms="1" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumberMultiplicationList -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumberMultiplicationList status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumberMultiplicationList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumberMultiplicationList status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumberMultiplicationList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testGetPrimeNumberMultiplicationList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumberMultiplicationList" duration-ms="1" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumberMultiplicationList -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumberMultiplicationList status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumberMultiplicationList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="testGetPrimeNumberMultiplicationList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumberMultiplicationList" duration-ms="1" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumberMultiplicationList -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumberMultiplicationList status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumberMultiplicationList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="testGetPrimeNumberMultiplicationList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumberMultiplicationList" duration-ms="43" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumberMultiplicationList -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="2" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumberMultiplicationList status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumberMultiplicationList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testGetPrimeNumberMultiplicationList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumberMultiplicationList" duration-ms="8" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[+]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumberMultiplicationList -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumberMultiplicationList status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumberMultiplicationList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="testGetPrimeNumberMultiplicationList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumberMultiplicationList" duration-ms="9" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumberMultiplicationList -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumberMultiplicationList status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumberMultiplicationList(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="5" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="3" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="testGetPrimeNumber_NegativeSize(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumber_NegativeSize" duration-ms="0" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize_negative" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Prime Number list generation Size cannot be negative]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Prime Number list generation Size cannot be negative
	at PrimeMultiplicationTable.getPrimeNumber(PrimeMultiplicationTable.java:77)
	at PrimeMultiplicationTableTest.testGetPrimeNumber_NegativeSize(PrimeMultiplicationTableTest.java:135)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumber_NegativeSize -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="2" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumber_NegativeSize status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumber_NegativeSize(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testGetPrimeNumber_NegativeSize(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumber_NegativeSize" duration-ms="0" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize_negative" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Prime Number list generation Size cannot be zero]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Prime Number list generation Size cannot be zero
	at PrimeMultiplicationTable.getPrimeNumber(PrimeMultiplicationTable.java:75)
	at PrimeMultiplicationTableTest.testGetPrimeNumber_NegativeSize(PrimeMultiplicationTableTest.java:135)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumber_NegativeSize -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testGetPrimeNumber_NegativeSize(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumber_NegativeSize" duration-ms="1" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize_negative" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Prime Number list generation Size cannot be negative]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Prime Number list generation Size cannot be negative
	at PrimeMultiplicationTable.getPrimeNumber(PrimeMultiplicationTable.java:77)
	at PrimeMultiplicationTableTest.testGetPrimeNumber_NegativeSize(PrimeMultiplicationTableTest.java:135)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumber_NegativeSize -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumber_NegativeSize status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumber_NegativeSize(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumber_NegativeSize status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumber_NegativeSize(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="testGetPrimeNumber_NegativeSize(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumber_NegativeSize" duration-ms="0" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize_negative" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Prime Number list generation Size cannot be negative]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Prime Number list generation Size cannot be negative
	at PrimeMultiplicationTable.getPrimeNumber(PrimeMultiplicationTable.java:77)
	at PrimeMultiplicationTableTest.testGetPrimeNumber_NegativeSize(PrimeMultiplicationTableTest.java:135)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumber_NegativeSize -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumber_NegativeSize status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumber_NegativeSize(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="setUp" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="startTimer()[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="startTimer" is-config="true" duration-ms="0" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTimer -->
        <test-method status="PASS" signature="endTimer(org.testng.ITestResult)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="endTimer" is-config="true" duration-ms="1" started-at="2016-05-09T22:58:37Z" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetPrimeNumber_NegativeSize status=SUCCESS method=PrimeMultiplicationTableTest.testGetPrimeNumber_NegativeSize(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTimer -->
        <test-method status="PASS" signature="testGetPrimeNumber_NegativeSize(int)[pri:0, instance:PrimeMultiplicationTableTest@16c0663d]" name="testGetPrimeNumber_NegativeSize" duration-ms="0" started-at="2016-05-09T22:58:37Z" data-provider="getPrimeNumberListSize_negative" finished-at="2016-05-09T22:58:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-100]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Prime Number list generation Size cannot be negative]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Prime Number list generation Size cannot be negative
	at PrimeMultiplicationTable.getPrimeNumber(PrimeMultiplicationTable.java:77)
	at PrimeMultiplicationTableTest.testGetPrimeNumber_NegativeSize(PrimeMultiplicationTableTest.java:135)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:109)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimeNumber_NegativeSize -->
      </class> <!-- PrimeMultiplicationTableTest -->
    </test> <!-- Command line test -->
  </suite> <!-- PrimeMultiplicationTableTest -->
</testng-results>
